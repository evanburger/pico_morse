#!/usr/bin/env python3
"""Pico Morse Client

Send an ASCII message via HTTP/TCP to the Pico Morse server that will cause the Pico's LED to flash the corresponding Morse code.

Arguments:
- The the first positional argument is the IP address and port of the server in the format "IP:PORT".
- The second positional argument is the message to be sent.

Examples:
```bash
./morse_client '192.168.0.42:80' 'Hello Paris.'
```
"""
import socket
import sys
from typing import Literal


LETTER_CODE_MAP = {
    "A": "._",
    "B": "_...",
    "C": "_._.",
    "D": "_..",
    "E": ".",
    "F": ".._.",
    "G": "__.",
    "H": "....",
    "I": "..",
    "J": ".___",
    "K": "_._",
    "L": "._..",
    "M": "__",
    "N": "_.",
    "O": "___",
    "P": ".__.",
    "Q": "__._",
    "R": "._.",
    "S": "...",
    "T": "_",
    "U": ".._",
    "V": "..._",
    "W": ".__",
    "X": "_.._",
    "Y": "_.__",
    "Z": "__..",
    ".": "._._._",
}

DELIMITERS = {
    "letter": "+",
    "word": "*",
}

def socket_() -> socket.socket:
    return socket.socket(socket.AF_INET, socket.SOCK_STREAM)

def start(socket: socket.socket, type_: Literal["client", "server"], destination_ip: str, port: int) -> None:
    if type_ == "client":
        socket.connect((destination_ip, port))
    elif type_ == "server":
        socket.bind((destination_ip, port))
    else:
        raise ValueError(f"Invalid type_ {type_}")

def encode_word_as_morse(word: str) -> str:
    try:
        return DELIMITERS["letter"].join(LETTER_CODE_MAP[letter] for letter in word.upper())
    except KeyError as error:
        raise ValueError(f"Invalid character in sentence: {error}")

def encode_message_as_morse(sentence: str) -> str:
    return DELIMITERS["word"].join(encode_word_as_morse(word) for word in sentence.split())


def main():
    destination_ip, port = sys.argv[1].split(":")
    text_message_string = sys.argv[2]
    _socket = socket_()
    start(_socket, "client", destination_ip, int(port))
    try:
        morse_message = encode_message_as_morse(text_message_string)
    except ValueError as error:
        print(error)
        return
    message_bytes = morse_message.encode("utf-8")
    _socket.send(message_bytes)
    _socket.recv(1024)


if __name__ == "__main__":
    main()
